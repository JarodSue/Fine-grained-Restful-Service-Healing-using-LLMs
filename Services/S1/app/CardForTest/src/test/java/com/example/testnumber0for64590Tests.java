

import static com.consol.citrus.actions.ReceiveMessageAction.Builder.receive;
import org.mockserver.matchers.Times;
import static com.consol.citrus.container.Conditional.Builder.conditional;
import static org.junit.jupiter.api.Assertions.assertEquals;
import com.consol.citrus.context.TestContext;
import com.consol.citrus.annotations.CitrusResource;
import static org.testng.Assert.assertTrue;import com.consol.citrus.annotations.CitrusTest;
import static com.consol.citrus.dsl.MessageSupport.MessageHeaderSupport.fromHeaders;
import com.consol.citrus.dsl.endpoint.CitrusEndpoints;
import static com.consol.citrus.http.actions.HttpActionBuilder.http;
import com.consol.citrus.http.client.HttpClient;
import com.consol.citrus.http.message.HttpMessageHeaders;
import com.consol.citrus.message.MessageType;
import com.consol.citrus.testng.spring.TestNGCitrusSpringSupport;
import org.junit.jupiter.api.*;
import java.util.logging.Logger;
import org.mockserver.verify.VerificationTimes;
import java.io.FileNotFoundException;
import java.util.concurrent.TimeUnit;
import org.mockserver.integration.ClientAndServer;
import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;
import org.mockserver.model.Header;import org.springframework.http.MediaType;
import org.testng.annotations.Test;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.util.concurrent.TimeUnit;
public class testnumber0for64590Tests extends TestNGCitrusSpringSupport{
    @CitrusResource
    private TestContext context;
     private static ClientAndServer mockServer;
private static final Logger log = Logger.getLogger("autoGeneratedTests");

    
        @BeforeClass
        public static void setup() {
           mockServer = startClientAndServer(1080);





               };


    @Test
    @CitrusTest
    public void testAlgo1() throws FileNotFoundException, InterruptedException{
          String token="";
          String body="";
          String status="";
                            HttpClient toClient = CitrusEndpoints
                                .http()
                                .client()
                                .requestUrl("http://localhost:62287/")
                                .build();
                            $(http()
                                .client(toClient)
                                .send()
                                .get("/2844f09e03bd4178846bfc43d8ac9069/browserLinkSignalR/negotiate?clientProtocol=2.1&requestUrl=https%3A%2F%2Flocalhost%3A7298%2F&browserName=&userAgent=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F130.0.0.0%20Safari%2F537.36%20Edg%2F130.0.0.0&browserIdKey=window.browserLink.initializationData.browserId&browserId=fcd9-78b8&_=1729599115340")
                                .message()
                              .accept(MediaType.ALL_VALUE));

                            $(receive(toClient)
                                .message()
                                .type(MessageType.PLAINTEXT)
                                .name("Response0")
                                .extract(fromHeaders()
                                    .header(HttpMessageHeaders.HTTP_STATUS_CODE, "statusCode")
));        

                variable("body",
                "citrus:message(Response0.body())");
                variable("status", "${statusCode}");
                status = context.getVariable("status");
                if ((status.equals("200"))){assertTrue(true);}
                else {Assumptions.assumeTrue(false ,"Inconclusive") ;}

                            $(http()
                                .client(toClient)
                                .send()
                                .get("/2844f09e03bd4178846bfc43d8ac9069/browserLinkSignalR/start?transport=webSockets&clientProtocol=2.1&requestUrl=https%3A%2F%2Flocalhost%3A7298%2F&browserName=&userAgent=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F130.0.0.0%20Safari%2F537.36%20Edg%2F130.0.0.0&browserIdKey=window.browserLink.initializationData.browserId&browserId=fcd9-78b8&connectionToken=AQAAANCMnd8BFdERjHoAwE%2FCl%2BsBAAAANpqy%2Bldk0kWD4JZKOKiMOAAAAAACAAAAAAAQZgAAAAEAACAAAAApoFZ7MbFCPZ7%2Fyx8q%2FQjFsG6jS93%2FVUjgEur%2FEuk0lQAAAAAOgAAAAAIAACAAAACAOQPyuE3%2Bcn%2BkUlWlHk08o3PAWWOHLiDK4nap84tzKzAAAAA9aXh8J74FM%2FX8yMPO8eCWD3SLWnkRQker4%2Bvxxc4t3YOblHFOSvik4RU%2FkV3GD%2BBAAAAA0PQlIesIU3yF%2B%2B2hL6RfPA05EzDEPLGnr52MOTBM94LhGrv8IzFLElLnjUdyqGc1CxDbUS03xjk5dnrMmUppag%3D%3D&_=1729599115341")
                                .message()
                              .accept(MediaType.ALL_VALUE));

                            $(receive(toClient)
                                .message()
                                .type(MessageType.PLAINTEXT)
                                .name("Response1")
                                .extract(fromHeaders()
                                    .header(HttpMessageHeaders.HTTP_STATUS_CODE, "statusCode")
));        

                variable("body",
                "citrus:message(Response1.body())");
                variable("status", "${statusCode}");
                status = context.getVariable("status");
                if ((status.equals("200"))){assertTrue(true);}
                else {Assumptions.assumeTrue(false ,"Inconclusive") ;}

                            $(http()
                                .client(toClient)
                                .send()
                                .post("/2844f09e03bd4178846bfc43d8ac9069/browserLinkSignalR/abort?transport=webSockets&clientProtocol=2.1&requestUrl=https%3A%2F%2Flocalhost%3A7298%2F&browserName=&userAgent=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F130.0.0.0%20Safari%2F537.36%20Edg%2F130.0.0.0&browserIdKey=window.browserLink.initializationData.browserId&browserId=fcd9-78b8&connectionToken=AQAAANCMnd8BFdERjHoAwE%2FCl%2BsBAAAANpqy%2Bldk0kWD4JZKOKiMOAAAAAACAAAAAAAQZgAAAAEAACAAAAApoFZ7MbFCPZ7%2Fyx8q%2FQjFsG6jS93%2FVUjgEur%2FEuk0lQAAAAAOgAAAAAIAACAAAACAOQPyuE3%2Bcn%2BkUlWlHk08o3PAWWOHLiDK4nap84tzKzAAAAA9aXh8J74FM%2FX8yMPO8eCWD3SLWnkRQker4%2Bvxxc4t3YOblHFOSvik4RU%2FkV3GD%2BBAAAAA0PQlIesIU3yF%2B%2B2hL6RfPA05EzDEPLGnr52MOTBM94LhGrv8IzFLElLnjUdyqGc1CxDbUS03xjk5dnrMmUppag%3D%3D")
                                .message()
                              .accept(MediaType.ALL_VALUE));

                            $(receive(toClient)
                                .message()
                                .type(MessageType.PLAINTEXT)
                                .name("Response2")
                                .extract(fromHeaders()
                                    .header(HttpMessageHeaders.HTTP_STATUS_CODE, "statusCode")
));        

                variable("body",
                "citrus:message(Response2.body())");
                variable("status", "${statusCode}");
                status = context.getVariable("status");
                if ((status.equals("200"))){assertTrue(true);}
                else {Assumptions.assumeTrue(false ,"Inconclusive") ;}
           verif();
           $(http()                   .client(toClient).send().get("/drop").message().accept(MediaType.ALL_VALUE));           stopServer();
               }        

            public static void verif() {
           }

        @AfterClass 
        public void stopServer() { 
            mockServer.stop();
        }
    } 
