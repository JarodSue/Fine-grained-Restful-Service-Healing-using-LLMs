

package com.example;
import static com.consol.citrus.actions.ReceiveMessageAction.Builder.receive;
import static com.consol.citrus.container.Conditional.Builder.conditional;import static org.junit.jupiter.api.Assertions.assertEquals;
import com.consol.citrus.context.TestContext;
import com.consol.citrus.annotations.CitrusResource;
import com.consol.citrus.annotations.CitrusTest;
import static com.consol.citrus.dsl.MessageSupport.MessageHeaderSupport.fromHeaders;
import com.consol.citrus.dsl.endpoint.CitrusEndpoints;
import static com.consol.citrus.http.actions.HttpActionBuilder.http;
import com.consol.citrus.http.client.HttpClient;
import com.consol.citrus.http.message.HttpMessageHeaders;
import com.consol.citrus.message.MessageType;
import com.consol.citrus.testng.spring.TestNGCitrusSpringSupport;
import org.junit.jupiter.api.*;
import java.util.logging.Logger;
import org.mockserver.verify.VerificationTimes;
import java.io.FileNotFoundException;
import java.util.concurrent.TimeUnit;
import org.mockserver.integration.ClientAndServer;
import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;
import org.mockserver.model.Header;import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.testng.annotations.Test;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

@SpringBootTest
public class testNumber0ForPCO8080Tests extends TestNGCitrusSpringSupport{
    @CitrusResource
    private TestContext context;
     private static ClientAndServer mockServer;
private static final Logger log = Logger.getLogger("autoGeneratedTests");

    
        @BeforeClass
        public static void setup() {
           mockServer = startClientAndServer(1080);

               mockServer.when(
                    request()
                      .withMethod("GET")
                      .withPath("/ident/TokenVerification")
                      .withHeader("Authorization", "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkdWNrIiwiaWQiOjEsImV4cCI6MTY3ODQ1MTU3OCwiaWF0IjoxNjc4MzY1MTc4fQ.iNqFeICxMUFqyssFLHGRc4x-CDr2qpM7n1lHURCERKa6t882HRh3RVhkx6XH7zSzwcivc9TQytnkgT0eno_nXQ"))
       .respond(
                          response()
                            .withStatusCode(200)
                            .withBody("")
                                   .withHeaders(
                      new Header("Authorization", "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkdWNrIiwiaWQiOjEsImV4cCI6MTY3ODQ1MTU3OCwiaWF0IjoxNjc4MzY1MTc4fQ.iNqFeICxMUFqyssFLHGRc4x-CDr2qpM7n1lHURCERKa6t882HRh3RVhkx6XH7zSzwcivc9TQytnkgT0eno_nXQ"))
                            .withDelay(TimeUnit.SECONDS,1)
                        );
           


               };


    @Test
    @CitrusTest
    public void testAlgo1() throws FileNotFoundException{
                            HttpClient toClient = CitrusEndpoints
                                .http()
                                .client()
                                .requestUrl("http://localhost:8080/")
                                .build();
                            $(http()
                                .client(toClient)
                                .send()
                                .get("prod/Products")
                                .message()
                                   .header("Authorization", "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkdWNrIiwiaWQiOjEsImV4cCI6MTY3ODQ1MTU3OCwiaWF0IjoxNjc4MzY1MTc4fQ.iNqFeICxMUFqyssFLHGRc4x-CDr2qpM7n1lHURCERKa6t882HRh3RVhkx6XH7zSzwcivc9TQytnkgT0eno_nXQ")
                              .accept(MediaType.ALL_VALUE));



                            $(receive(toClient)
                                .message()
                                .type(MessageType.PLAINTEXT)
                                .name("Response")
                                .extract(fromHeaders()
                                    .header(HttpMessageHeaders.HTTP_STATUS_CODE, "statusCode")
));        

                variable("body",
                "citrus:message(Response.body())");
                variable("status", "${statusCode}");
                String body = context.getVariable("body");
                String status = context.getVariable("status");
                assertEquals( "[]",body);
                assertEquals("200",status);
           verif();
           stopServer();
               }        

            public static void verif() {
        mockServer.verify(
                        request().withPath("/ident/TokenVerification"),
                        VerificationTimes.exactly(1)
        ); 
            }

        @AfterClass 
        public void stopServer() { 
            mockServer.stop();
        }
    } 
